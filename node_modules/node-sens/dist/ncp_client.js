"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NCPClient = void 0;
var axios_1 = __importDefault(require("axios"));
var crypto_1 = __importDefault(require("crypto"));
var NCPClient = /** @class */ (function () {
    /**
     *
     * Constructs an instance of NCPClient.
     *
     * @param phoneNumber 발신 전화번호
     *
     * @param serviceId 프로젝트의 서비스 id
     *
     * @param secretKey 프로젝트 계정의 secretKey
     *
     * @param accessKey 프로젝트 계정의 accessKey
     */
    function NCPClient(options) {
        var phoneNumber = options.phoneNumber, serviceId = options.serviceId, secretKey = options.secretKey, accessKey = options.accessKey;
        this.phoneNumber = phoneNumber;
        this.serviceId = serviceId;
        this.secretKey = secretKey;
        this.accessKey = accessKey;
        this.url = "https://sens.apigw.ntruss.com/sms/v2/services/" + this.serviceId + "/messages";
        this.timestamp = Date.now().toString();
        this.method = 'POST';
        var space = ' ';
        var newLine = '\n';
        var message = [];
        var hmac = crypto_1.default.createHmac('sha256', this.secretKey);
        var url2 = "/sms/v2/services/" + this.serviceId + "/messages";
        message.push(this.method);
        message.push(space);
        message.push(url2);
        message.push(newLine);
        message.push(this.timestamp);
        message.push(newLine);
        message.push(this.accessKey);
        this.signature = hmac.update(message.join('')).digest('base64');
    }
    /**
     *
     * SMS를 보내는 함수
     *
     * @param to 수신 전화번호
     * @param content 전달할 내용
     * @param countryCode 국가 코드 (default 82)
     *
     * @returns Promise with success(boolean), msg(string), status(number)
     *
     */
    NCPClient.prototype.sendSMS = function (_a) {
        var to = _a.to, content = _a.content, _b = _a.countryCode, countryCode = _b === void 0 ? '82' : _b;
        return __awaiter(this, void 0, void 0, function () {
            var response, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default({
                                method: 'POST',
                                url: this.url,
                                headers: {
                                    'Content-Type': 'application/json; charset=utf-8',
                                    'x-ncp-iam-access-key': this.accessKey,
                                    'x-ncp-apigw-timestamp': this.timestamp,
                                    'x-ncp-apigw-signature-v2': this.signature,
                                },
                                data: {
                                    type: 'SMS',
                                    contentType: 'COMM',
                                    countryCode: countryCode,
                                    from: this.phoneNumber,
                                    content: content,
                                    messages: [
                                        {
                                            to: "" + to,
                                        },
                                    ],
                                },
                            })];
                    case 1:
                        response = _c.sent();
                        if (response.status === 202) {
                            return [2 /*return*/, {
                                    success: true,
                                    status: response.status,
                                    msg: response.statusText,
                                }];
                        }
                        else {
                            return [2 /*return*/, {
                                    success: false,
                                    status: response.status,
                                    msg: response.statusText,
                                }];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _c.sent();
                        return [2 /*return*/, {
                                success: false,
                                msg: error_1.response.statusText || 'Internal Server Error',
                                status: error_1.response.status || 500,
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return NCPClient;
}());
exports.NCPClient = NCPClient;
